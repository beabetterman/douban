<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/rabbit 
    http://www.springframework.org/schema/rabbit/spring-rabbit-1.6.xsd
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">


	<description> RabbitMQ config</description>
	
	<context:component-scan base-package="ssm.douban.rabbitmq"></context:component-scan>
	<context:component-scan base-package="ssm.douban.service"></context:component-scan>
    
    <context:property-placeholder location="classpath:rabbitmq.properties" ignore-unresolvable="true" />
    
    <!-- 连接配置 -->
    <rabbit:connection-factory id="connectionFactory" host="${mq.host}" username="${mq.username}" password="${mq.password}" port="${mq.port}" publisher-confirms="true" />

    <rabbit:admin connection-factory="connectionFactory"/>
    
    
    <!-- 消息对象json转换类 -->
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" /> 
    
    <!-- spring template声明-->
    <rabbit:template id="amqpTemplate" exchange="my_direct_mq_exchange" connection-factory="connectionFactory"  message-converter="jsonMessageConverter"/>
    
    <!-- spring template声明-->
    <rabbit:template id="rabbitTemplate" exchange="my_topic_mq_exchange" connection-factory="connectionFactory"  message-converter="jsonMessageConverter"/>
    
    
    <!-- 声明一个DirectQueue -->
    <!-- durable:是否持久化 ；      exclusive: 仅创建者可以使用的私有队列，断开后自动删除；    auto_delete: 当所有消费客户端连接断开后，是否自动删除队列  --> 
    <rabbit:queue id="my_direct_queue" name="my_direct_queue" durable="true" auto-delete="false" exclusive="false" />

    <!-- 声明一个Direct Exchange -->
    <rabbit:direct-exchange  id="my_direct_mq_exchange" name="my_direct_mq_exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="my_direct_queue" key="direct_queue.key"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    
    <!-- 声明一个TopicQueue -->
    <!-- durable:是否持久化 ；      exclusive: 仅创建者可以使用的私有队列，断开后自动删除；    auto_delete: 当所有消费客户端连接断开后，是否自动删除队列  --> 
    <rabbit:queue id="my_topic_queue" name="my_topic_queue" durable="true" auto-delete="false" exclusive="false" />
    <!-- 声明一个Topic Exchange -->
    <rabbit:topic-exchange  id="my_topic_mq_exchange" name="my_topic_mq_exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="my_topic_queue" pattern="topic.*"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
    
    <!-- 监听器 -->
    <bean id="directQueueListener" class="ssm.douban.rabbitmq.DirectQueueListener"/>
    <bean id="topicQueueListener" class="ssm.douban.rabbitmq.TopicQueueListener"/>

    <!-- 配置监听queue -->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual">
            <rabbit:listener queues="my_direct_queue" ref="directQueueListener"/>
            <rabbit:listener queues="my_topic_queue" ref="topicQueueListener"/>
    </rabbit:listener-container>
    
</beans>